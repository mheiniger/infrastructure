#!/usr/bin/env bash
set -e

print_help () {
  echo "Usage ./terraform <command>:<environment>"
  echo ""
  echo "  available commands:"
  echo "   create    : create the infrastructure"
  echo "   destroy   : drop the infrastructure"
  echo "   config    : get the terraform output"
  echo "   terraform : use the low level terraform methods"
  echo "   "
  exit 1
}

root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cmd=${1%:*}
env=${1##*:}
args="${@:2}"
envdir=$root/environments/$env
tmpdir='/tmp'
if [ "$cmd" == "$env" ]
  then
  print_help
fi

checkdocker () {
  VERSION=$(docker version -f '{{.Server.Version}}')
  if [[ $VERSION != 1* ]] && [[ $HOST != 2* ]] ;
  then
    echo '* This script depends on a running docker server'
    exit 1
  fi
}

create () {
  mkdir -p $envdir
  touch $envdir/terraform.tfvars
  if ! grep -q 'rancher_public_key' $envdir/terraform.tfvars; then
    echo "Creating rancher ssh key..."
    mkdir -p $envdir
    ssh-keygen -q -t rsa -f $tmpdir/rancher -N ''
    echo "rancher_public_key=\"$(cat $tmpdir/rancher.pub)\"" >> $envdir/terraform.tfvars
    echo -e "rancher_private_key=<<EOF\n$(cat $tmpdir/rancher)\nEOF" >> $envdir/terraform.tfvars
    rm $tmpdir/rancher $tmpdir/rancher.pub
  fi
}

terraform () {
  checkdocker
  docker run --rm -it -v $envdir:/data -v $root/structure:/structure uzyexe/terraform:v0.7.0 $@
}

apply () {
  echo $@
  terraform apply $@ /structure
}

destroy () {
  terraform destroy $@ /structure
}

config () {
  mkdir -p $envdir
  terraform output $@
}

connect () {
  echo "$(config private_key)" > $tmpdir/rancher
  chmod 600 $tmpdir/rancher
  ssh-add $tmpdir/rancher 2>/dev/null
  rm $tmpdir/rancher
  $(echo "$(config ssh)" | tr '\r' ' ')
}

shift
case "$cmd" in
    create)
        create
        apply $args
        ;;
    destroy)
        destroy $args
        ;;
    config)
        config $args
        ;;
    ssh)
        connect $args
        ;;
    terraform)
        terraform $args /structure
        ;;
    *)
        print_help
        ;;
esac
